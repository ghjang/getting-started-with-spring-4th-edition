@startuml
' 스타일 설정
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxMessageSize 300
skinparam sequenceGroupBorderThickness 2
skinparam sequenceGroupBodyBackgroundColor transparent

' 참가자 정의
participant Main
participant ClassPathXmlApplicationContext as Context
participant PropertyPlaceholderConfigurer as PPC
participant DaoFactory
participant ArticleJdbcDao
participant ArticleMybatisDao
participant ArticleController
participant ArticleService
entity "application.properties" as Properties
entity "applicationContext.xml" as XML

' 실행 흐름
Main -> Context : new ClassPathXmlApplicationContext("applicationContext.xml")
Context -> XML : applicationContext.xml 파싱
XML --> Context : 빈 정의 로드
Context -> PPC : Bean 생성 (PropertyPlaceholderConfigurer)
Context -> Properties : application.properties 로드
Properties --> PPC : 프로퍼티 값 반환
Context -> DaoFactory : Bean 생성 (DaoFactory)
DaoFactory -> Properties : daoType 읽기
Properties --> DaoFactory : daoType 값 반환
alt daoType == "jdbc"
    Context -> ArticleJdbcDao : Bean 생성 (ArticleJdbcDao)
    ArticleJdbcDao <-- DaoFactory : ArticleDao 빈 반환
else daoType == "mybatis"
    Context -> ArticleMybatisDao : Bean 생성 (ArticleMybatisDao)
    ArticleMybatisDao <-- DaoFactory : ArticleDao 빈 반환
end
DaoFactory --> Context : ArticleDao 빈 반환
Context -> ArticleController : Bean 생성 (ArticleController)
Context -> ArticleService : Bean 생성 (ArticleService)
Context --> Main : 컨텍스트 초기화 완료
Main -> ArticleController : getBean("articleController", ArticleController.class)
Main -> ArticleController : getArticle(1)
ArticleController -> ArticleService : getArticle(1)
ArticleService -> ArticleJdbcDao : getArticle(1)
ArticleJdbcDao -> ArticleJdbcDao : 데이터베이스 접근 (JDBC)
ArticleJdbcDao --> ArticleService : Article 정보 반환
ArticleService --> ArticleController : Article 정보 반환
ArticleController --> Main : Article 정보 반환
Main -> Main : System.out.println(article)

@enduml